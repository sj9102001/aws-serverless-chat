AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: Serverless Chat Application

Globals:
  Function:
    Runtime: python3.9
    Timeout: 30

Resources:
  ChatAPI:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration: REGIONAL
      Name: serverless-chat-api
      StageName: test
      Models:
        adduser:
          type: object
          required:
            - UserId
            - Email
          properties:
            UserId:
              type: string
            Email:
              type: string
  UserTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: User
      PrimaryKey:
        Name: UserId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  ChatRoomTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: ChatRoom
      PrimaryKey:
        Name: ChatRoomId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  AddFriendTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: AddFriend
      PrimaryKey:
        Name: UserId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  adduserfunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function to add new user to User table.
      CodeUri: ./src/add_user.py
      FunctionName: serverless-chat-adduser
      Handler: add_user.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        add:
          Type: Api
          Properties:
            RestApiId: !Ref ChatAPI
            Path: /add-user
            Method: POST
            RequestModel:
              Model: adduser
              required: true
  fetchalluserfunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function to fetch all users from User table
      CodeUri: ./src/fetch_users.py
      FunctionName: serverless-chat-fetchalluser
      Handler: fetch_users.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        fetchAll:
          Type: Api
          Properties:
            RestApiId: !Ref ChatAPI
            Path: /fetch-users
            Method: GET
  updateuserfunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function to update user information
      CodeUri: ./src/update_user.py
      FunctionName: serverless-chat-updateuser
      Handler: update_user.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        updateuser:
          Type: Api
          Properties:
            RestApiId: !Ref ChatAPI
            Path: /update-user
            Method: POST
  userdetailfunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function to fetch user information
      CodeUri: ./src/user_details.py
      FunctionName: serverless-chat-userdetails
      Handler: user_details.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        userdetail:
          Type: Api
          Properties:
            RestApiId: !Ref ChatAPI
            Path: /user-details
            Method: POST
  searchusersfunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function to search users from emailId or name
      CodeUri: ./src/search_users.py
      FunctionName: serverless-chat-searchusers
      Handler: search_users.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        searchusers:
          Type: Api
          Properties:
            RestApiId: !Ref ChatAPI
            Path: /search-users/{query}
            Method: GET
  sendfriendrequestfunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function to send friend request to a user.
      CodeUri: ./src/send_friend_request.py
      FunctionName: serverless-chat-sendfriendrequest
      Handler: send_friend_request.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AddFriendTable
      Events:
        sendfriendrequest:
          Type: Api
          Properties:
            RestApiId: !Ref ChatAPI
            Path: /send-friend-request
            Method: POST
  acceptfriendrequestfunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function to accept friend request.
      CodeUri: ./src/accept_friend_request.py
      FunctionName: serverless-chat-acceptfriendrequest
      Handler: accept_friend_request.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AddFriendTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatRoomTable
      Events:
        acceptfriendrequest:
          Type: Api
          Properties:
            RestApiId: !Ref ChatAPI
            Path: /accept-friend-request
            Method: POST
